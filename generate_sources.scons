import os, sys
import itertools
from akpytemp import Template
from scons_utils import add_extension

def generate_derived_sources(target, source, env):
    pynap_path = env['PYNABP_PATH']
    if not (pynap_path in sys.path):
        sys.path.append(pynap_path)
    for tgt, src in itertools.izip(target, source):
        Template(path=str(src)).save(str(tgt), **env.__dict__)
    return 0

env = Environment(PYNABP_PATH=Dir('#').abspath)
Import('sources')

source_generator = Builder(
        action=generate_derived_sources, suffix='.vx', src_suffix='.v')
env.Append(BUILDERS = {'Generate': source_generator})

derived_sources = {}
for alias, sources in sources.iteritems():
    derived_list = map(
            lambda src:
                env.Generate(
                        target=add_extension(src, 'vx'),
                        source=src), sources)
    SideEffect(add_extension(sources, 'vx.tf'), derived_list)
    derived_sources[alias] = derived_list

# generate only target alias
env.Alias('gen_only', derived_sources['all'])

Export('env derived_sources')

# vim:ft=python:
