import sys
import itertools
from akpytemp import Template
from scons_utils import add_extension, pynabp_sources
from translate_process_generate import \
        write_translate_process, fixed_point_translate_filter_process_files


Import('SOURCE_DIR')


def generate_derived_sources(target, source, env):
    pynabp_path = env['PYNABP_PATH']
    if not (pynabp_path in sys.path):
        sys.path.append(pynabp_path)
    for tgt, src in itertools.izip(target, source):
        t = Template(path=str(src), include_path=SOURCE_DIR)
        t.save(str(tgt), **env.__dict__)
    return 0


def generate_translate_filter_processes(target, source, env):
    write_translate_process(str(target[0]))


env = Environment(PYNABP_PATH=Dir('#').abspath)
Import('sources')

source_generator = Builder(
        action=generate_derived_sources, suffix='.vx', src_suffix='.v')
translate_filter_process_generator = Builder(
        action=generate_translate_filter_processes,
        suffix='.pytf', src_suffix='.py')
env.Append(BUILDERS = {
            'Generate': source_generator,
            'GenerateTFProcess': translate_filter_process_generator,
        })

derived_sources = {}
for alias, sources in sources.iteritems():
    derived_list = [
                env.Generate(target=add_extension(src, 'vx'), source=src)
                for src in sources]
    Depends(derived_list, '#build/current.naconfig')
    Depends(derived_list, pynabp_sources(Dir('#pynabp').abspath))
    SideEffect(add_extension(sources, 'vxtf'), derived_list)
    derived_sources[alias] = derived_list

translate_filter_processes = [
        env.GenerateTFProcess(target=tf_proc, source='#default.naconfig')
        for tf_proc in fixed_point_translate_filter_process_files()]

# generate only target alias
env.Alias('gen_only', derived_sources['all'])
env.Alias('tf_only', translate_filter_processes)

Export('env derived_sources translate_filter_processes')

# vim:ft=python:
